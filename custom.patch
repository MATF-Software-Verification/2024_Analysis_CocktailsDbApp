diff --git a/.idea/deploymentTargetSelector.xml b/.idea/deploymentTargetSelector.xml
index e95fd81..54d3939 100644
--- a/.idea/deploymentTargetSelector.xml
+++ b/.idea/deploymentTargetSelector.xml
@@ -13,21 +13,6 @@
         </DropdownSelection>
         <DialogSelection />
       </SelectionState>
-      <SelectionState runConfigName="testLoginWithInvalidCredentials()">
-        <option name="selectionMode" value="DROPDOWN" />
-      </SelectionState>
-      <SelectionState runConfigName="testCocktailsBottomNavigation()">
-        <option name="selectionMode" value="DROPDOWN" />
-      </SelectionState>
-      <SelectionState runConfigName="testAppFlow()">
-        <option name="selectionMode" value="DROPDOWN" />
-      </SelectionState>
-      <SelectionState runConfigName="testCocktailsBottomNavigation() (1)">
-        <option name="selectionMode" value="DROPDOWN" />
-      </SelectionState>
-      <SelectionState runConfigName="DatabaseTests">
-        <option name="selectionMode" value="DROPDOWN" />
-      </SelectionState>
     </selectionStates>
   </component>
 </project>
\ No newline at end of file
diff --git a/app/src/test/java/com/example/cocktailsdbapp/database/RoomCocktailTest.kt b/app/src/test/java/com/example/cocktailsdbapp/database/RoomCocktailTest.kt
index e71f97b..c6618ae 100644
--- a/app/src/test/java/com/example/cocktailsdbapp/database/RoomCocktailTest.kt
+++ b/app/src/test/java/com/example/cocktailsdbapp/database/RoomCocktailTest.kt
@@ -60,38 +60,6 @@ class RoomCocktailTest {
         assertEquals("", roomCocktail.idDrink)
     }
 
-    @Test
-    fun `test RoomCocktail copy functionality`() {
-        // Given
-        val original = RoomCocktail("Mojito", "mojito.jpg", "11007")
-        
-        // When
-        val copied = original.copy(strDrink = "Cuba Libre")
-        
-        // Then
-        assertEquals("Cuba Libre", copied.strDrink)
-        assertEquals("mojito.jpg", copied.strDrinkThumb)
-        assertEquals("11007", copied.idDrink)
-        assertEquals("Mojito", original.strDrink)
-    }
-
-    @Test
-    fun `test RoomCocktail list operations`() {
-        // Given
-        val cocktails = listOf(
-            RoomCocktail("Mojito", "mojito.jpg", "11007"),
-            RoomCocktail("Margarita", "margarita.jpg", "11008"),
-            RoomCocktail("Martini", "martini.jpg", "11009")
-        )
-        
-        // When
-        val filtered = cocktails.filter { it.strDrink.startsWith("M") }
-        
-        // Then
-        assertEquals(3, filtered.size)
-        assertTrue(filtered.all { it.strDrink.startsWith("M") })
-    }
-
     @Test
     fun `test RoomCocktail hashCode consistency`() {
         // Given
diff --git a/app/src/test/java/com/example/cocktailsdbapp/model/CocktailResponseTest.kt b/app/src/test/java/com/example/cocktailsdbapp/model/CocktailResponseTest.kt
index 38a067c..f17d11e 100644
--- a/app/src/test/java/com/example/cocktailsdbapp/model/CocktailResponseTest.kt
+++ b/app/src/test/java/com/example/cocktailsdbapp/model/CocktailResponseTest.kt
@@ -67,51 +67,5 @@ class CocktailResponseTest {
         assertEquals(1, response.drinks?.size)
         assertEquals("Mojito", response.drinks?.first()?.strDrink)
     }
-
-    @Test
-    fun `test CocktailResponse copy functionality`() {
-        // Given
-        val originalCocktails = listOf(Cocktail("Mojito", "mojito.jpg", "11007", true))
-        val original = CocktailResponse(originalCocktails)
-        
-        // When
-        val newCocktails = listOf(Cocktail("Margarita", "margarita.jpg", "11008", false))
-        val copied = original.copy(drinks = newCocktails)
-        
-        // Then
-        assertEquals("Margarita", copied.drinks?.first()?.strDrink)
-        assertEquals("Mojito", original.drinks?.first()?.strDrink)
-    }
-
-    @Test
-    fun `test CocktailResponse toString method`() {
-        // Given
-        val cocktails = listOf(Cocktail("Mojito", "mojito.jpg", "11007", true))
-        val response = CocktailResponse(cocktails)
-        
-        // When
-        val result = response.toString()
-        
-        // Then
-        assertTrue(result.contains("CocktailResponse"))
-    }
-
-    @Test
-    fun `test CocktailResponse with multiple cocktails filtering`() {
-        // Given
-        val cocktails = listOf(
-            Cocktail("Mojito", "mojito.jpg", "11007", true),
-            Cocktail("Margarita", "margarita.jpg", "11008", false),
-            Cocktail("Martini", "martini.jpg", "11009", true)
-        )
-        val response = CocktailResponse(cocktails)
-        
-        // When
-        val favorites = response.drinks?.filter { it.isFavorite }
-        
-        // Then
-        assertNotNull(favorites)
-        assertEquals(2, favorites?.size)
-    }
 }
 
diff --git a/app/src/test/java/com/example/cocktailsdbapp/model/CocktailTest.kt b/app/src/test/java/com/example/cocktailsdbapp/model/CocktailTest.kt
index 4bf513f..4017e26 100644
--- a/app/src/test/java/com/example/cocktailsdbapp/model/CocktailTest.kt
+++ b/app/src/test/java/com/example/cocktailsdbapp/model/CocktailTest.kt
@@ -69,21 +69,6 @@ class CocktailTest {
         assertFalse(original.isFavorite)
     }
 
-    @Test
-    fun `test Cocktail toString method`() {
-        // Given
-        val cocktail = Cocktail("Mojito", "mojito.jpg", "11007", true)
-        
-        // When
-        val result = cocktail.toString()
-        
-        // Then
-        assertTrue(result.contains("Mojito"))
-        assertTrue(result.contains("mojito.jpg"))
-        assertTrue(result.contains("11007"))
-        assertTrue(result.contains("true"))
-    }
-
     @Test
     fun `test Cocktail with empty strings`() {
         // Given
@@ -95,24 +80,5 @@ class CocktailTest {
         assertEquals("", cocktail.idDrink)
         assertFalse(cocktail.isFavorite)
     }
-
-    @Test
-    fun `test Cocktail list operations`() {
-        // Given
-        val cocktails = listOf(
-            Cocktail("Mojito", "mojito.jpg", "11007", true),
-            Cocktail("Margarita", "margarita.jpg", "11008", false),
-            Cocktail("Martini", "martini.jpg", "11009", false)
-        )
-        
-        // When
-        val favorites = cocktails.filter { it.isFavorite }
-        val nonFavorites = cocktails.filter { !it.isFavorite }
-        
-        // Then
-        assertEquals(1, favorites.size)
-        assertEquals(2, nonFavorites.size)
-        assertEquals("Mojito", favorites[0].strDrink)
-    }
 }
 
diff --git a/app/src/test/java/com/example/cocktailsdbapp/model/UserTest.kt b/app/src/test/java/com/example/cocktailsdbapp/model/UserTest.kt
index 4a43f04..588f668 100644
--- a/app/src/test/java/com/example/cocktailsdbapp/model/UserTest.kt
+++ b/app/src/test/java/com/example/cocktailsdbapp/model/UserTest.kt
@@ -35,9 +35,9 @@ class UserTest {
         val user = User(name, email, password)
 
         // Then
-        assertEquals("", user.name)
-        assertEquals("", user.email)
-        assertEquals("", user.password)
+        assertEquals(name, user.name)
+        assertEquals(email, user.email)
+        assertEquals(password, user.password)
     }
 
     @Test
@@ -94,175 +94,6 @@ class UserTest {
         assertNotEquals(user1.hashCode(), user2.hashCode())
     }
 
-    @Test
-    fun `user equality with different name`() {
-        // Given
-        val user1 = User("John Doe", "john@example.com", "password123")
-        val user2 = User("Jane Doe", "john@example.com", "password123")
-
-        // When & Then
-        assertNotEquals(user1, user2)
-    }
-
-    @Test
-    fun `user equality with different email`() {
-        // Given
-        val user1 = User("John Doe", "john@example.com", "password123")
-        val user2 = User("John Doe", "jane@example.com", "password123")
-
-        // When & Then
-        assertNotEquals(user1, user2)
-    }
-
-    @Test
-    fun `user equality with different password`() {
-        // Given
-        val user1 = User("John Doe", "john@example.com", "password123")
-        val user2 = User("John Doe", "john@example.com", "password456")
-
-        // When & Then
-        assertNotEquals(user1, user2)
-    }
-
-    @Test
-    fun `user copy with new name`() {
-        // Given
-        val originalUser = User("John Doe", "john@example.com", "password123")
-
-        // When
-        val copiedUser = originalUser.copy(name = "Jane Doe")
-
-        // Then
-        assertEquals("Jane Doe", copiedUser.name)
-        assertEquals("john@example.com", copiedUser.email)
-        assertEquals("password123", copiedUser.password)
-        assertNotEquals(originalUser, copiedUser)
-    }
-
-    @Test
-    fun `user copy with new email`() {
-        // Given
-        val originalUser = User("John Doe", "john@example.com", "password123")
-
-        // When
-        val copiedUser = originalUser.copy(email = "jane@example.com")
-
-        // Then
-        assertEquals("John Doe", copiedUser.name)
-        assertEquals("jane@example.com", copiedUser.email)
-        assertEquals("password123", copiedUser.password)
-        assertNotEquals(originalUser, copiedUser)
-    }
-
-    @Test
-    fun `user copy with new password`() {
-        // Given
-        val originalUser = User("John Doe", "john@example.com", "password123")
-
-        // When
-        val copiedUser = originalUser.copy(password = "newpassword456")
-
-        // Then
-        assertEquals("John Doe", copiedUser.name)
-        assertEquals("john@example.com", copiedUser.email)
-        assertEquals("newpassword456", copiedUser.password)
-        assertNotEquals(originalUser, copiedUser)
-    }
-
-    @Test
-    fun `user copy with all new values`() {
-        // Given
-        val originalUser = User("John Doe", "john@example.com", "password123")
-
-        // When
-        val copiedUser = originalUser.copy(
-            name = "Jane Smith",
-            email = "jane.smith@example.com",
-            password = "newpassword789"
-        )
-
-        // Then
-        assertEquals("Jane Smith", copiedUser.name)
-        assertEquals("jane.smith@example.com", copiedUser.email)
-        assertEquals("newpassword789", copiedUser.password)
-        assertNotEquals(originalUser, copiedUser)
-    }
-
-    @Test
-    fun `user copy with no changes`() {
-        // Given
-        val originalUser = User("John Doe", "john@example.com", "password123")
-
-        // When
-        val copiedUser = originalUser.copy()
-
-        // Then
-        assertEquals(originalUser, copiedUser)
-        assertEquals(originalUser.hashCode(), copiedUser.hashCode())
-    }
-
-    @Test
-    fun `user toString contains all fields`() {
-        // Given
-        val user = User("John Doe", "john@example.com", "password123")
-
-        // When
-        val userString = user.toString()
-
-        // Then
-        assertTrue(userString.contains("John Doe"))
-        assertTrue(userString.contains("john@example.com"))
-        assertTrue(userString.contains("password123"))
-    }
-
-    @Test
-    fun `user with email containing numbers`() {
-        // Given
-        val name = "User123"
-        val email = "user123@example123.com"
-        val password = "pass123"
-
-        // When
-        val user = User(name, email, password)
-
-        // Then
-        assertEquals("User123", user.name)
-        assertEquals("user123@example123.com", user.email)
-        assertEquals("pass123", user.password)
-    }
-
-    @Test
-    fun `user with email containing underscores and dots`() {
-        // Given
-        val name = "Test User"
-        val email = "test.user_name@sub.domain.com"
-        val password = "test_password"
-
-        // When
-        val user = User(name, email, password)
-
-        // Then
-        assertEquals("Test User", user.name)
-        assertEquals("test.user_name@sub.domain.com", user.email)
-        assertEquals("test_password", user.password)
-    }
-
-    @Test
-    fun `user with unicode characters`() {
-        // Given
-        val name = "测试用户"
-        val email = "test@测试.com"
-        val password = "пароль123"
-
-        // When
-        val user = User(name, email, password)
-
-        // Then
-        assertEquals("测试用户", user.name)
-        assertEquals("test@测试.com", user.email)
-        assertEquals("пароль123", user.password)
-    }
-
     @Test
     fun `user with whitespace in name`() {
         // Given
@@ -279,86 +110,6 @@ class UserTest {
         assertEquals("password123", user.password)
     }
 
-    @Test
-    fun `user with whitespace in email`() {
-        // Given
-        val name = "John Doe"
-        val email = "  john@example.com  "
-        val password = "password123"
-
-        // When
-        val user = User(name, email, password)
-
-        // Then
-        assertEquals("John Doe", user.name)
-        assertEquals("  john@example.com  ", user.email)
-        assertEquals("password123", user.password)
-    }
-
-    @Test
-    fun `user with whitespace in password`() {
-        // Given
-        val name = "John Doe"
-        val email = "john@example.com"
-        val password = "  password123  "
-
-        // When
-        val user = User(name, email, password)
-
-        // Then
-        assertEquals("John Doe", user.name)
-        assertEquals("john@example.com", user.email)
-        assertEquals("  password123  ", user.password)
-    }
-
-    @Test
-    fun `user with newline characters`() {
-        // Given
-        val name = "John\nDoe"
-        val email = "john@example.com"
-        val password = "pass\nword"
-
-        // When
-        val user = User(name, email, password)
-
-        // Then
-        assertEquals("John\nDoe", user.name)
-        assertEquals("john@example.com", user.email)
-        assertEquals("pass\nword", user.password)
-    }
-
-    @Test
-    fun `user with tab characters`() {
-        // Given
-        val name = "John\tDoe"
-        val email = "john@example.com"
-        val password = "pass\tword"
-
-        // When
-        val user = User(name, email, password)
-
-        // Then
-        assertEquals("John\tDoe", user.name)
-        assertEquals("john@example.com", user.email)
-        assertEquals("pass\tword", user.password)
-    }
-
-    @Test
-    fun `user with case sensitive data`() {
-        // Given
-        val name = "John Doe"
-        val email = "John.Doe@Example.COM"
-        val password = "Password123"
-
-        // When
-        val user = User(name, email, password)
-
-        // Then
-        assertEquals("John Doe", user.name)
-        assertEquals("John.Doe@Example.COM", user.email)
-        assertEquals("Password123", user.password)
-    }
-
     @Test
     fun `user equality case sensitivity`() {
         // Given
diff --git a/app/src/test/java/com/example/cocktailsdbapp/repository/CocktailsRepoImplTest.kt b/app/src/test/java/com/example/cocktailsdbapp/repository/CocktailsRepoImplTest.kt
index a0f48a6..ab44711 100644
--- a/app/src/test/java/com/example/cocktailsdbapp/repository/CocktailsRepoImplTest.kt
+++ b/app/src/test/java/com/example/cocktailsdbapp/repository/CocktailsRepoImplTest.kt
@@ -375,20 +375,6 @@ class CocktailsRepoImplTest {
         coVerify(exactly = 1) { mockCocktailDao.getFavoriteCocktails(userEmail) }
     }
 
-    @Test
-    fun `getFavorites returns null when no favorites`() = runTest {
-        // Given
-        val userEmail = "test@example.com"
-        coEvery { mockCocktailDao.getFavoriteCocktails(userEmail) } returns null
-
-        // When
-        val result = repository.getFavorites(userEmail)
-
-        // Then
-        assertNull(result)
-        coVerify(exactly = 1) { mockCocktailDao.getFavoriteCocktails(userEmail) }
-    }
-
     @Test
     fun `findFavoriteCocktail returns cocktail from database`() = runTest {
         // Given
@@ -406,21 +392,6 @@ class CocktailsRepoImplTest {
         coVerify(exactly = 1) { mockCocktailDao.findFavoriteCocktail(userEmail, cocktailId) }
     }
 
-    @Test
-    fun `findFavoriteCocktail returns null when not found`() = runTest {
-        // Given
-        val userEmail = "test@example.com"
-        val cocktailId = "11007"
-        coEvery { mockCocktailDao.findFavoriteCocktail(userEmail, cocktailId) } returns null
-
-        // When
-        val result = repository.findFavoriteCocktail(userEmail, cocktailId)
-
-        // Then
-        assertNull(result)
-        coVerify(exactly = 1) { mockCocktailDao.findFavoriteCocktail(userEmail, cocktailId) }
-    }
-
     @Test
     fun `removeFavorite calls dao removeFavorite`() = runTest {
         // Given
@@ -454,53 +425,5 @@ class CocktailsRepoImplTest {
             ) 
         }
     }
-
-    @Test
-    fun `insertCocktail creates correct RoomFavorite`() = runTest {
-        // Given
-        val userEmail = "user@test.com"
-        val roomCocktail = RoomCocktail("Martini", "martini.jpg", "11009")
-        val capturedFavorite = slot<RoomFavorite>()
-        
-        coEvery { mockCocktailDao.insertCocktail(roomCocktail) } just Runs
-        coEvery { mockCocktailDao.insertFavorite(capture(capturedFavorite)) } just Runs
-
-        // When
-        repository.insertCocktail(userEmail, roomCocktail)
-
-        // Then
-        assertEquals(userEmail, capturedFavorite.captured.userEmail)
-        assertEquals("11009", capturedFavorite.captured.idDrink)
-    }
-
-    @Test
-    fun `getCocktailsByAlcoholContent handles empty response`() = runTest {
-        // Given
-        val alcoholContent = "Alcoholic"
-        val expectedResponse = CocktailResponse(drinks = emptyList())
-        coEvery { mockApiService.getCocktailsByAlcoholContent(alcoholContent) } returns expectedResponse
-
-        // When
-        val result = repository.getCocktailsByAlcoholContent(alcoholContent)
-
-        // Then
-        assertEquals(expectedResponse, result)
-        assertTrue(result.drinks?.isEmpty() == true)
-    }
-
-    @Test
-    fun `getCocktailsByAlcoholContent handles null response`() = runTest {
-        // Given
-        val alcoholContent = "Alcoholic"
-        val expectedResponse = CocktailResponse(drinks = null)
-        coEvery { mockApiService.getCocktailsByAlcoholContent(alcoholContent) } returns expectedResponse
-
-        // When
-        val result = repository.getCocktailsByAlcoholContent(alcoholContent)
-
-        // Then
-        assertEquals(expectedResponse, result)
-        assertNull(result.drinks)
-    }
 }
 
diff --git a/app/src/test/java/com/example/cocktailsdbapp/ui/authorization/AuthViewModelTest.kt b/app/src/test/java/com/example/cocktailsdbapp/ui/authorization/AuthViewModelTest.kt
index 0c12947..2aff53d 100644
--- a/app/src/test/java/com/example/cocktailsdbapp/ui/authorization/AuthViewModelTest.kt
+++ b/app/src/test/java/com/example/cocktailsdbapp/ui/authorization/AuthViewModelTest.kt
@@ -66,37 +66,6 @@ class AuthViewModelTest {
         verify(exactly = 1) { mockEditor.apply() } // Only called once
     }
 
-    @Test
-    fun `saveUserData with different users with same email returns false`() {
-        // Given
-        val user1 = User("John Doe", "john@example.com", "password123")
-        val user2 = User("Jane Doe", "john@example.com", "password456")
-        viewModel.saveUserData(user1) // First save
-
-        // When
-        val result = viewModel.saveUserData(user2) // Second save with same email
-
-        // Then
-        assertFalse(result)
-        verify(exactly = 1) { mockEditor.apply() } // Only called once
-    }
-
-    @Test
-    fun `saveUserData with different emails saves both users`() {
-        // Given
-        val user1 = User("John Doe", "john@example.com", "password123")
-        val user2 = User("Jane Doe", "jane@example.com", "password456")
-
-        // When
-        val result1 = viewModel.saveUserData(user1)
-        val result2 = viewModel.saveUserData(user2)
-
-        // Then
-        assertTrue(result1)
-        assertTrue(result2)
-        verify(exactly = 2) { mockEditor.apply() }
-    }
-
     @Test
     fun `getUserData returns correct user data`() {
         // Given
@@ -147,30 +116,6 @@ class AuthViewModelTest {
         assertEquals("", result.password)
     }
 
-    @Test
-    fun `getUserData with null values returns empty strings`() {
-        // Given
-        val email = "john@example.com"
-        
-        every { 
-            mockSharedPreferences.getString("${email}${Constants.SHARED_PREF_NAME}", "") 
-        } returns null
-        every { 
-            mockSharedPreferences.getString("${email}${Constants.SHARED_PREF_EMAIL}", "") 
-        } returns null
-        every { 
-            mockSharedPreferences.getString("${email}${Constants.SHARED_PREF_PASSWORD}", "") 
-        } returns null
-
-        // When
-        val result = viewModel.getUserData(email)
-
-        // Then
-        assertEquals("", result.name)
-        assertEquals("", result.email)
-        assertEquals("", result.password)
-    }
-
     @Test
     fun `isUserInfoValid with correct credentials returns true`() {
         // Given
@@ -232,26 +177,6 @@ class AuthViewModelTest {
         assertFalse(result)
     }
 
-    @Test
-    fun `isUserInfoValid with null email returns false`() {
-        // Given
-        val email = "john@example.com"
-        val password = "password123"
-        
-        every { 
-            mockSharedPreferences.getString("${email}${Constants.SHARED_PREF_EMAIL}", "") 
-        } returns null
-        every { 
-            mockSharedPreferences.getString("${email}${Constants.SHARED_PREF_PASSWORD}", "") 
-        } returns password
-
-        // When
-        val result = viewModel.isUserInfoValid(email, password)
-
-        // Then
-        assertFalse(result)
-    }
-
     @Test
     fun `editUserName updates name correctly`() {
         // Given
@@ -279,35 +204,6 @@ class AuthViewModelTest {
             mockEditor.apply()
         }
     }
-
-    @Test
-    fun `editUserName with empty name updates correctly`() {
-        // Given
-        val email = "john@example.com"
-        val oldName = "John Doe"
-        val newName = ""
-        val password = "password123"
-        
-        every { 
-            mockSharedPreferences.getString("${email}${Constants.SHARED_PREF_NAME}", "") 
-        } returns oldName
-        every { 
-            mockSharedPreferences.getString("${email}${Constants.SHARED_PREF_EMAIL}", "") 
-        } returns email
-        every { 
-            mockSharedPreferences.getString("${email}${Constants.SHARED_PREF_PASSWORD}", "") 
-        } returns password
-
-        // When
-        viewModel.editUserName(email, newName)
-
-        // Then
-        verify {
-            mockEditor.putString("${email}${Constants.SHARED_PREF_NAME}", newName)
-            mockEditor.apply()
-        }
-    }
-
     @Test
     fun `editPassword updates password correctly`() {
         // Given
@@ -335,216 +231,4 @@ class AuthViewModelTest {
             mockEditor.apply()
         }
     }
-
-    @Test
-    fun `editPassword with empty password updates correctly`() {
-        // Given
-        val email = "john@example.com"
-        val name = "John Doe"
-        val oldPassword = "password123"
-        val newPassword = ""
-        
-        every { 
-            mockSharedPreferences.getString("${email}${Constants.SHARED_PREF_NAME}", "") 
-        } returns name
-        every { 
-            mockSharedPreferences.getString("${email}${Constants.SHARED_PREF_EMAIL}", "") 
-        } returns email
-        every { 
-            mockSharedPreferences.getString("${email}${Constants.SHARED_PREF_PASSWORD}", "") 
-        } returns oldPassword
-
-        // When
-        viewModel.editPassword(email, newPassword)
-
-        // Then
-        verify {
-            mockEditor.putString("${email}${Constants.SHARED_PREF_PASSWORD}", newPassword)
-            mockEditor.apply()
-        }
-    }
-
-    @Test
-    fun `editUserName with special characters updates correctly`() {
-        // Given
-        val email = "john@example.com"
-        val oldName = "John Doe"
-        val newName = "José María"
-        val password = "password123"
-        
-        every { 
-            mockSharedPreferences.getString("${email}${Constants.SHARED_PREF_NAME}", "") 
-        } returns oldName
-        every { 
-            mockSharedPreferences.getString("${email}${Constants.SHARED_PREF_EMAIL}", "") 
-        } returns email
-        every { 
-            mockSharedPreferences.getString("${email}${Constants.SHARED_PREF_PASSWORD}", "") 
-        } returns password
-
-        // When
-        viewModel.editUserName(email, newName)
-
-        // Then
-        verify {
-            mockEditor.putString("${email}${Constants.SHARED_PREF_NAME}", newName)
-            mockEditor.apply()
-        }
-    }
-
-    @Test
-    fun `editPassword with special characters updates correctly`() {
-        // Given
-        val email = "john@example.com"
-        val name = "John Doe"
-        val oldPassword = "password123"
-        val newPassword = "p@ssw0rd!#$%"
-        
-        every { 
-            mockSharedPreferences.getString("${email}${Constants.SHARED_PREF_NAME}", "") 
-        } returns name
-        every { 
-            mockSharedPreferences.getString("${email}${Constants.SHARED_PREF_EMAIL}", "") 
-        } returns email
-        every { 
-            mockSharedPreferences.getString("${email}${Constants.SHARED_PREF_PASSWORD}", "") 
-        } returns oldPassword
-
-        // When
-        viewModel.editPassword(email, newPassword)
-
-        // Then
-        verify {
-            mockEditor.putString("${email}${Constants.SHARED_PREF_PASSWORD}", newPassword)
-            mockEditor.apply()
-        }
-    }
-
-    @Test
-    fun `saveUserData with empty strings saves correctly`() {
-        // Given
-        val user = User("", "", "")
-
-        // When
-        val result = viewModel.saveUserData(user)
-
-        // Then
-        assertTrue(result)
-        verify {
-            mockEditor.putString("${user.email}${Constants.SHARED_PREF_NAME}", user.name)
-            mockEditor.putString("${user.email}${Constants.SHARED_PREF_EMAIL}", user.email)
-            mockEditor.putString("${user.email}${Constants.SHARED_PREF_PASSWORD}", user.password)
-            mockEditor.apply()
-        }
-    }
-
-    @Test
-    fun `saveUserData with long strings saves correctly`() {
-        // Given
-        val user = User("A".repeat(1000), "test@example.com", "B".repeat(1000))
-
-        // When
-        val result = viewModel.saveUserData(user)
-
-        // Then
-        assertTrue(result)
-        verify {
-            mockEditor.putString("${user.email}${Constants.SHARED_PREF_NAME}", user.name)
-            mockEditor.putString("${user.email}${Constants.SHARED_PREF_EMAIL}", user.email)
-            mockEditor.putString("${user.email}${Constants.SHARED_PREF_PASSWORD}", user.password)
-            mockEditor.apply()
-        }
-    }
-
-    @Test
-    fun `isUserInfoValid with case sensitive password`() {
-        // Given
-        val email = "john@example.com"
-        val storedPassword = "Password123"
-        val inputPassword = "password123"
-        
-        every { 
-            mockSharedPreferences.getString("${email}${Constants.SHARED_PREF_EMAIL}", "") 
-        } returns email
-        every { 
-            mockSharedPreferences.getString("${email}${Constants.SHARED_PREF_PASSWORD}", "") 
-        } returns storedPassword
-
-        // When
-        val result = viewModel.isUserInfoValid(email, inputPassword)
-
-        // Then
-        assertFalse(result) // Case sensitive
-    }
-
-    @Test
-    fun `isUserInfoValid with exact case match returns true`() {
-        // Given
-        val email = "john@example.com"
-        val storedPassword = "Password123"
-        val inputPassword = "Password123"
-        
-        every { 
-            mockSharedPreferences.getString("${email}${Constants.SHARED_PREF_EMAIL}", "") 
-        } returns email
-        every { 
-            mockSharedPreferences.getString("${email}${Constants.SHARED_PREF_PASSWORD}", "") 
-        } returns storedPassword
-
-        // When
-        val result = viewModel.isUserInfoValid(email, inputPassword)
-
-        // Then
-        assertTrue(result)
-    }
-
-    @Test
-    fun `multiple saveUserData calls with different users`() {
-        // Given
-        val user1 = User("John Doe", "john@example.com", "password123")
-        val user2 = User("Jane Smith", "jane@example.com", "password456")
-        val user3 = User("Bob Johnson", "bob@example.com", "password789")
-
-        // When
-        val result1 = viewModel.saveUserData(user1)
-        val result2 = viewModel.saveUserData(user2)
-        val result3 = viewModel.saveUserData(user3)
-
-        // Then
-        assertTrue(result1)
-        assertTrue(result2)
-        assertTrue(result3)
-        verify(exactly = 3) { mockEditor.apply() }
-    }
-
-    @Test
-    fun `editUserName and editPassword with same user`() {
-        // Given
-        val email = "john@example.com"
-        val name = "John Doe"
-        val oldPassword = "password123"
-        val newName = "John Smith"
-        val newPassword = "newpassword456"
-        
-        every { 
-            mockSharedPreferences.getString("${email}${Constants.SHARED_PREF_NAME}", "") 
-        } returns name
-        every { 
-            mockSharedPreferences.getString("${email}${Constants.SHARED_PREF_EMAIL}", "") 
-        } returns email
-        every { 
-            mockSharedPreferences.getString("${email}${Constants.SHARED_PREF_PASSWORD}", "") 
-        } returns oldPassword
-
-        // When
-        viewModel.editUserName(email, newName)
-        viewModel.editPassword(email, newPassword)
-
-        // Then
-        verify {
-            mockEditor.putString("${email}${Constants.SHARED_PREF_NAME}", newName)
-            mockEditor.putString("${email}${Constants.SHARED_PREF_PASSWORD}", newPassword)
-        }
-        verify(exactly = 2) { mockEditor.apply() }
-    }
 }
diff --git a/app/src/test/java/com/example/cocktailsdbapp/ui/category/FilterViewModelTest.kt b/app/src/test/java/com/example/cocktailsdbapp/ui/category/FilterViewModelTest.kt
index fc3e750..ea08e7d 100644
--- a/app/src/test/java/com/example/cocktailsdbapp/ui/category/FilterViewModelTest.kt
+++ b/app/src/test/java/com/example/cocktailsdbapp/ui/category/FilterViewModelTest.kt
@@ -308,67 +308,6 @@ class FilterViewModelTest {
         assertNotNull(viewModel.filterData)
     }
 
-    @Test
-    fun `fetchData with multiple calls updates data correctly`() = runTest {
-        // Given
-        val alcoholResponse = AlcoholContentResponse(
-            drinks = listOf(
-                com.example.cocktailsdbapp.model.AlcoholContent(strAlcoholic = "Alcoholic")
-            )
-        )
-        val categoryResponse = FilterResponse(
-            drinks = listOf(
-                com.example.cocktailsdbapp.model.DrinkCategory(strCategory = "Cocktail")
-            )
-        )
-
-        coEvery { mockRepo.getAlcoholContent() } returns alcoholResponse
-        coEvery { mockRepo.getCategories() } returns categoryResponse
-
-        // When - First call
-        viewModel.fetchData(Constants.FILTER_ALCOHOL)
-        testDispatcher.scheduler.advanceUntilIdle()
-
-        // Then - First call
-        assertEquals("Alcoholic", viewModel.filterData.value?.first())
-
-        // When - Second call
-        viewModel.fetchData(Constants.FILTER_CATEGORY)
-        testDispatcher.scheduler.advanceUntilIdle()
-
-        // Then - Second call
-        assertEquals("Cocktail", viewModel.filterData.value?.first())
-    }
-
-
-
-
-
-    @Test
-    fun `getAlcoholContent with large dataset`() = runTest {
-        // Given
-        val largeResponse = AlcoholContentResponse(
-            drinks = (1..100).map { 
-                com.example.cocktailsdbapp.model.AlcoholContent(strAlcoholic = "Alcoholic $it")
-            }
-        )
-
-        coEvery { mockRepo.getAlcoholContent() } returns largeResponse
-
-        // When
-        viewModel.fetchData(Constants.FILTER_ALCOHOL)
-        testDispatcher.scheduler.advanceUntilIdle()
-
-        // Then
-        coVerify { mockRepo.getAlcoholContent() }
-        val result = viewModel.filterData.value
-        assertNotNull(result)
-        assertEquals(100, result?.size)
-        assertTrue(result?.contains("Alcoholic 1") == true)
-        assertTrue(result?.contains("Alcoholic 50") == true)
-        assertTrue(result?.contains("Alcoholic 100") == true)
-    }
-
     @Test
     fun `getFirstLetters returns correct alphabet range`() = runTest {
         // When
diff --git a/app/src/test/java/com/example/cocktailsdbapp/ui/cocktails/CocktailsViewModelTest.kt b/app/src/test/java/com/example/cocktailsdbapp/ui/cocktails/CocktailsViewModelTest.kt
index 26bc6cf..3c07e57 100644
--- a/app/src/test/java/com/example/cocktailsdbapp/ui/cocktails/CocktailsViewModelTest.kt
+++ b/app/src/test/java/com/example/cocktailsdbapp/ui/cocktails/CocktailsViewModelTest.kt
@@ -181,48 +181,6 @@ class CocktailsViewModelTest {
         coVerify { mockRepo.getFavorites(userEmail) }
     }
 
-    @Test
-    fun `fetchData with empty response sets cocktailsData to null`() = runTest {
-        // Given
-        val userEmail = "test@example.com"
-        val filterCategory = Constants.FILTER_ALCOHOL
-        val filter = "Alcoholic"
-        val response = CocktailResponse(drinks = emptyList())
-        val favorites = listOf<RoomCocktail>()
-
-        coEvery { mockRepo.getCocktailsByAlcoholContent(filter) } returns response
-        coEvery { mockRepo.getFavorites(userEmail) } returns favorites
-
-        // When
-        viewModel.fetchData(userEmail, filterCategory, filter)
-        testDispatcher.scheduler.advanceUntilIdle()
-
-        // Then
-        coVerify { mockRepo.getCocktailsByAlcoholContent(filter) }
-        coVerify { mockRepo.getFavorites(userEmail) }
-    }
-
-    @Test
-    fun `fetchData with null drinks sets cocktailsData to null`() = runTest {
-        // Given
-        val userEmail = "test@example.com"
-        val filterCategory = Constants.FILTER_ALCOHOL
-        val filter = "Alcoholic"
-        val response = CocktailResponse(drinks = null)
-        val favorites = listOf<RoomCocktail>()
-
-        coEvery { mockRepo.getCocktailsByAlcoholContent(filter) } returns response
-        coEvery { mockRepo.getFavorites(userEmail) } returns favorites
-
-        // When
-        viewModel.fetchData(userEmail, filterCategory, filter)
-        testDispatcher.scheduler.advanceUntilIdle()
-
-        // Then
-        coVerify { mockRepo.getCocktailsByAlcoholContent(filter) }
-        coVerify { mockRepo.getFavorites(userEmail) }
-    }
-
     @Test
     fun `fetchData with null favorites still processes response`() = runTest {
         // Given
@@ -272,7 +230,6 @@ class CocktailsViewModelTest {
 
         // When
         viewModel.favoriteCocktail(userEmail, cocktail)
-        advanceTimeBy(1000)
         testDispatcher.scheduler.advanceUntilIdle()
 
         // Then
@@ -287,6 +244,7 @@ class CocktailsViewModelTest {
                 }
             )
         }
+        coVerify(exactly = 0) { mockRepo.removeFavorite(any(), any()) }
     }
 
     @Test
@@ -301,7 +259,6 @@ class CocktailsViewModelTest {
 
         // When
         viewModel.favoriteCocktail(userEmail, cocktail)
-        advanceTimeBy(1000)
         testDispatcher.scheduler.advanceUntilIdle()
 
         // Then
@@ -310,23 +267,6 @@ class CocktailsViewModelTest {
         coVerify(exactly = 0) { mockRepo.insertCocktail(any(), any()) }
     }
 
-    @Test
-    fun `favoriteCocktail toggles favorite status correctly`() = runTest {
-        // Given
-        val userEmail = "test@example.com"
-        val cocktail = Cocktail("Margarita", "margarita.jpg", "11008", false)
-
-        coEvery { mockRepo.findFavoriteCocktail(userEmail, cocktail.idDrink) } returns null
-        coEvery { mockRepo.insertCocktail(userEmail, any()) } just Runs
-
-        // When - Add to favorites
-        viewModel.favoriteCocktail(userEmail, cocktail)
-        advanceTimeBy(1000)
-        testDispatcher.scheduler.advanceUntilIdle()
-
-        // Then
-        coVerify { mockRepo.insertCocktail(userEmail, any()) }
-    }
 
     @Test
     fun `favoriteCocktail with different users maintains separate favorites`() = runTest {
@@ -342,12 +282,13 @@ class CocktailsViewModelTest {
         // When
         viewModel.favoriteCocktail(user1, cocktail)
         viewModel.favoriteCocktail(user2, cocktail)
-        advanceTimeBy(1000)
         testDispatcher.scheduler.advanceUntilIdle()
 
         // Then - Both users should be able to favorite
         coVerify { mockRepo.insertCocktail(user1, any()) }
         coVerify { mockRepo.insertCocktail(user2, any()) }
+
+        coVerify(exactly = 0) { mockRepo.removeFavorite(any(), any()) }
     }
 
     @Test
@@ -355,35 +296,5 @@ class CocktailsViewModelTest {
         // Then
         assertNotNull(viewModel.cocktailsData)
     }
-
-    @Test
-    fun `fetchData with multiple filter types calls correct methods`() = runTest {
-        // Given
-        val userEmail = "test@example.com"
-        val favorites = listOf<RoomCocktail>()
-
-        coEvery { mockRepo.getCocktailsByAlcoholContent(any()) } returns CocktailResponse(drinks = emptyList())
-        coEvery { mockRepo.getCocktailsByCategory(any()) } returns CocktailResponse(drinks = emptyList())
-        coEvery { mockRepo.getCocktailsByGlass(any()) } returns CocktailResponse(drinks = emptyList())
-        coEvery { mockRepo.getCocktailsByIngredient(any()) } returns CocktailResponse(drinks = emptyList())
-        coEvery { mockRepo.getCocktailsByFirstLetter(any()) } returns CocktailResponse(drinks = emptyList())
-        coEvery { mockRepo.getFavorites(userEmail) } returns favorites
-
-        // When - Test all filter types
-        viewModel.fetchData(userEmail, Constants.FILTER_ALCOHOL, "Alcoholic")
-        viewModel.fetchData(userEmail, Constants.FILTER_CATEGORY, "Cocktail")
-        viewModel.fetchData(userEmail, Constants.FILTER_GLASS, "Highball")
-        viewModel.fetchData(userEmail, Constants.FILTER_INGREDIENT, "Vodka")
-        viewModel.fetchData(userEmail, Constants.FILTER_LETTER, "M")
-        testDispatcher.scheduler.advanceUntilIdle()
-
-        // Then - All methods should be called
-        coVerify { mockRepo.getCocktailsByAlcoholContent("Alcoholic") }
-        coVerify { mockRepo.getCocktailsByCategory("Cocktail") }
-        coVerify { mockRepo.getCocktailsByGlass("Highball") }
-        coVerify { mockRepo.getCocktailsByIngredient("Vodka") }
-        coVerify { mockRepo.getCocktailsByFirstLetter("M") }
-        coVerify(atLeast = 5) { mockRepo.getFavorites(userEmail) }
-    }
 }
 
diff --git a/app/src/test/java/com/example/cocktailsdbapp/ui/cocktails/FavoritesViewModelTest.kt b/app/src/test/java/com/example/cocktailsdbapp/ui/cocktails/FavoritesViewModelTest.kt
index df02244..15a1711 100644
--- a/app/src/test/java/com/example/cocktailsdbapp/ui/cocktails/FavoritesViewModelTest.kt
+++ b/app/src/test/java/com/example/cocktailsdbapp/ui/cocktails/FavoritesViewModelTest.kt
@@ -147,7 +147,6 @@ class FavoritesViewModelTest {
 
         // When
         viewModel.favoriteCocktail(userEmail, cocktail)
-        advanceTimeBy(1000)
         testDispatcher.scheduler.advanceUntilIdle()
 
         // Then
@@ -162,6 +161,7 @@ class FavoritesViewModelTest {
                 }
             )
         }
+        coVerify(exactly = 0) { mockRepo.removeFavorite(any(), any()) }
     }
 
     @Test
@@ -176,7 +176,6 @@ class FavoritesViewModelTest {
 
         // When
         viewModel.favoriteCocktail(userEmail, cocktail)
-        advanceTimeBy(1000)
         testDispatcher.scheduler.advanceUntilIdle()
 
         // Then
@@ -185,24 +184,6 @@ class FavoritesViewModelTest {
         coVerify(exactly = 0) { mockRepo.insertCocktail(any(), any()) }
     }
 
-    @Test
-    fun `favoriteCocktail toggles favorite status correctly`() = runTest {
-        // Given
-        val userEmail = "test@example.com"
-        val cocktail = Cocktail("Margarita", "margarita.jpg", "11008", false)
-
-        coEvery { mockRepo.findFavoriteCocktail(userEmail, cocktail.idDrink) } returns null
-        coEvery { mockRepo.insertCocktail(userEmail, any()) } just Runs
-
-        // When - Add to favorites
-        viewModel.favoriteCocktail(userEmail, cocktail)
-        advanceTimeBy(1000)
-        testDispatcher.scheduler.advanceUntilIdle()
-
-        // Then
-        coVerify { mockRepo.insertCocktail(userEmail, any()) }
-    }
-
     @Test
     fun `favoriteCocktail with different users maintains separate favorites`() = runTest {
         // Given
@@ -217,7 +198,6 @@ class FavoritesViewModelTest {
         // When
         viewModel.favoriteCocktail(user1, cocktail)
         viewModel.favoriteCocktail(user2, cocktail)
-        advanceTimeBy(1000)
         testDispatcher.scheduler.advanceUntilIdle()
 
         // Then - Both users should be able to favorite
@@ -225,68 +205,12 @@ class FavoritesViewModelTest {
         coVerify { mockRepo.insertCocktail(user2, any()) }
     }
 
-    @Test
-    fun `favoriteCocktail creates correct RoomCocktail`() = runTest {
-        // Given
-        val userEmail = "test@example.com"
-        val cocktail = Cocktail("Piña Colada", "pina.jpg", "12345", false)
-
-        coEvery { mockRepo.findFavoriteCocktail(userEmail, cocktail.idDrink) } returns null
-        coEvery { mockRepo.insertCocktail(userEmail, any()) } just Runs
-
-        // When
-        viewModel.favoriteCocktail(userEmail, cocktail)
-        advanceTimeBy(1000)
-        testDispatcher.scheduler.advanceUntilIdle()
-
-        // Then
-        coVerify {
-            mockRepo.insertCocktail(
-                userEmail,
-                match {
-                    it.strDrink == "Piña Colada" &&
-                    it.strDrinkThumb == "pina.jpg" &&
-                    it.idDrink == "12345"
-                }
-            )
-        }
-    }
-
     @Test
     fun `favoritesData is initialized`() {
         // Then
         assertNotNull(viewModel.favoritesData)
     }
 
-    @Test
-    fun `getFavorites with multiple calls processes each correctly`() = runTest {
-        // Given
-        val userEmail = "test@example.com"
-        val firstCallFavorites = listOf(RoomCocktail("Mojito", "mojito.jpg", "11007"))
-        val secondCallFavorites = listOf(
-            RoomCocktail("Mojito", "mojito.jpg", "11007"),
-            RoomCocktail("Margarita", "margarita.jpg", "11008")
-        )
-
-        coEvery { mockRepo.getFavorites(userEmail) } returnsMany listOf(firstCallFavorites, secondCallFavorites)
-
-        // When - First call
-        viewModel.getFavorites(userEmail)
-        testDispatcher.scheduler.advanceUntilIdle()
-
-        // Then - First call
-        assertEquals(1, viewModel.favoritesData.value?.size)
-        assertEquals("Mojito", viewModel.favoritesData.value?.first()?.strDrink)
-
-        // When - Second call
-        viewModel.getFavorites(userEmail)
-        testDispatcher.scheduler.advanceUntilIdle()
-
-        // Then - Second call
-        assertEquals(2, viewModel.favoritesData.value?.size)
-        assertEquals("Margarita", viewModel.favoritesData.value?.last()?.strDrink)
-    }
-
     @Test
     fun `getFavorites converts RoomCocktail to Cocktail with correct properties`() = runTest {
         // Given
@@ -310,25 +234,6 @@ class FavoritesViewModelTest {
         assertTrue(convertedCocktail?.isFavorite == true)
     }
 
-    @Test
-    fun `favoriteCocktail handles null existing favorite correctly`() = runTest {
-        // Given
-        val userEmail = "test@example.com"
-        val cocktail = Cocktail("New Cocktail", "new.jpg", "11111", false)
-
-        coEvery { mockRepo.findFavoriteCocktail(userEmail, cocktail.idDrink) } returns null
-        coEvery { mockRepo.insertCocktail(userEmail, any()) } just Runs
-
-        // When
-        viewModel.favoriteCocktail(userEmail, cocktail)
-        advanceTimeBy(1000)
-        testDispatcher.scheduler.advanceUntilIdle()
-
-        // Then
-        coVerify { mockRepo.insertCocktail(userEmail, any()) }
-        coVerify(exactly = 0) { mockRepo.removeFavorite(any(), any()) }
-    }
-
     @Test
     fun `favoriteCocktail handles existing favorite correctly`() = runTest {
         // Given
@@ -341,7 +246,6 @@ class FavoritesViewModelTest {
 
         // When
         viewModel.favoriteCocktail(userEmail, cocktail)
-        advanceTimeBy(1000)
         testDispatcher.scheduler.advanceUntilIdle()
 
         // Then
diff --git a/app/src/test/java/com/example/cocktailsdbapp/ui/details/CocktailDetailsViewModelTest.kt b/app/src/test/java/com/example/cocktailsdbapp/ui/details/CocktailDetailsViewModelTest.kt
index 7307add..ea1969b 100644
--- a/app/src/test/java/com/example/cocktailsdbapp/ui/details/CocktailDetailsViewModelTest.kt
+++ b/app/src/test/java/com/example/cocktailsdbapp/ui/details/CocktailDetailsViewModelTest.kt
@@ -114,135 +114,6 @@ class CocktailDetailsViewModelTest {
         assertEquals("Cocktail", viewModel.cocktailDetailsData.value?.strCategory)
     }
 
-    @Test
-    fun `getDetails with multiple cocktails returns first one`() = runTest {
-        // Given
-        val cocktailId = "11007"
-        val firstCocktail = CocktailDetails(
-            idDrink = "11007",
-            strDrink = "Mojito",
-            strDrinkAlternate = null,
-            strTags = null,
-            strVideo = null,
-            strCategory = "Cocktail",
-            strIBA = null,
-            strAlcoholic = "Alcoholic",
-            strGlass = "Highball glass",
-            strInstructions = "Mix ingredients",
-            strInstructionsES = null,
-            strInstructionsDE = null,
-            strInstructionsFR = null,
-            strInstructionsIT = null,
-            strInstructionsZH_HANS = null,
-            strInstructionsZH_HANT = null,
-            strDrinkThumb = "mojito.jpg",
-            strIngredient1 = "Rum",
-            strIngredient2 = "Lime",
-            strIngredient3 = null,
-            strIngredient4 = null,
-            strIngredient5 = null,
-            strIngredient6 = null,
-            strIngredient7 = null,
-            strIngredient8 = null,
-            strIngredient9 = null,
-            strIngredient10 = null,
-            strIngredient11 = null,
-            strIngredient12 = null,
-            strIngredient13 = null,
-            strIngredient14 = null,
-            strIngredient15 = null,
-            strMeasure1 = "2 oz",
-            strMeasure2 = "1 oz",
-            strMeasure3 = null,
-            strMeasure4 = null,
-            strMeasure5 = null,
-            strMeasure6 = null,
-            strMeasure7 = null,
-            strMeasure8 = null,
-            strMeasure9 = null,
-            strMeasure10 = null,
-            strMeasure11 = null,
-            strMeasure12 = null,
-            strMeasure13 = null,
-            strMeasure14 = null,
-            strMeasure15 = null,
-            strImageSource = null,
-            strImageAttribution = null,
-            strCreativeCommonsConfirmed = null,
-            dateModified = null,
-            isFavorite = false
-        )
-        val secondCocktail = CocktailDetails(
-            idDrink = "11008",
-            strDrink = "Margarita",
-            strDrinkAlternate = null,
-            strTags = null,
-            strVideo = null,
-            strCategory = "Cocktail",
-            strIBA = null,
-            strAlcoholic = "Alcoholic",
-            strGlass = "Cocktail glass",
-            strInstructions = "Mix ingredients",
-            strInstructionsES = null,
-            strInstructionsDE = null,
-            strInstructionsFR = null,
-            strInstructionsIT = null,
-            strInstructionsZH_HANS = null,
-            strInstructionsZH_HANT = null,
-            strDrinkThumb = "margarita.jpg",
-            strIngredient1 = "Tequila",
-            strIngredient2 = "Lime",
-            strIngredient3 = null,
-            strIngredient4 = null,
-            strIngredient5 = null,
-            strIngredient6 = null,
-            strIngredient7 = null,
-            strIngredient8 = null,
-            strIngredient9 = null,
-            strIngredient10 = null,
-            strIngredient11 = null,
-            strIngredient12 = null,
-            strIngredient13 = null,
-            strIngredient14 = null,
-            strIngredient15 = null,
-            strMeasure1 = "2 oz",
-            strMeasure2 = "1 oz",
-            strMeasure3 = null,
-            strMeasure4 = null,
-            strMeasure5 = null,
-            strMeasure6 = null,
-            strMeasure7 = null,
-            strMeasure8 = null,
-            strMeasure9 = null,
-            strMeasure10 = null,
-            strMeasure11 = null,
-            strMeasure12 = null,
-            strMeasure13 = null,
-            strMeasure14 = null,
-            strMeasure15 = null,
-            strImageSource = null,
-            strImageAttribution = null,
-            strCreativeCommonsConfirmed = null,
-            dateModified = null,
-            isFavorite = false
-        )
-        val response = CocktailDetailsResponse(drinks = listOf(firstCocktail, secondCocktail))
-
-        coEvery { mockRepo.getCocktailDetails(cocktailId) } returns response
-
-        // When
-        viewModel.getDetails(cocktailId)
-        testDispatcher.scheduler.advanceUntilIdle()
-
-        // Then
-        coVerify { mockRepo.getCocktailDetails(cocktailId) }
-        assertNotNull(viewModel.cocktailDetailsData.value)
-        assertEquals("11007", viewModel.cocktailDetailsData.value?.idDrink)
-        assertEquals("Mojito", viewModel.cocktailDetailsData.value?.strDrink)
-        // Should return the first cocktail, not the second
-        assertNotEquals("11008", viewModel.cocktailDetailsData.value?.idDrink)
-    }
-
     @Test
     fun `getDetails with empty drinks list sets null`() = runTest {
         // Given
@@ -292,382 +163,9 @@ class CocktailDetailsViewModelTest {
         coVerify { mockRepo.getCocktailDetails(cocktailId) }
     }
 
-    @Test
-    fun `getDetails with different cocktail IDs calls repository with correct ID`() = runTest {
-        // Given
-        val cocktailId1 = "11007"
-        val cocktailId2 = "11008"
-        val cocktailDetails1 = CocktailDetails(
-            idDrink = "11007",
-            strDrink = "Mojito",
-            strDrinkAlternate = null,
-            strTags = null,
-            strVideo = null,
-            strCategory = "Cocktail",
-            strIBA = null,
-            strAlcoholic = "Alcoholic",
-            strGlass = "Highball glass",
-            strInstructions = "Mix ingredients",
-            strInstructionsES = null,
-            strInstructionsDE = null,
-            strInstructionsFR = null,
-            strInstructionsIT = null,
-            strInstructionsZH_HANS = null,
-            strInstructionsZH_HANT = null,
-            strDrinkThumb = "mojito.jpg",
-            strIngredient1 = "Rum",
-            strIngredient2 = "Lime",
-            strIngredient3 = null,
-            strIngredient4 = null,
-            strIngredient5 = null,
-            strIngredient6 = null,
-            strIngredient7 = null,
-            strIngredient8 = null,
-            strIngredient9 = null,
-            strIngredient10 = null,
-            strIngredient11 = null,
-            strIngredient12 = null,
-            strIngredient13 = null,
-            strIngredient14 = null,
-            strIngredient15 = null,
-            strMeasure1 = "2 oz",
-            strMeasure2 = "1 oz",
-            strMeasure3 = null,
-            strMeasure4 = null,
-            strMeasure5 = null,
-            strMeasure6 = null,
-            strMeasure7 = null,
-            strMeasure8 = null,
-            strMeasure9 = null,
-            strMeasure10 = null,
-            strMeasure11 = null,
-            strMeasure12 = null,
-            strMeasure13 = null,
-            strMeasure14 = null,
-            strMeasure15 = null,
-            strImageSource = null,
-            strImageAttribution = null,
-            strCreativeCommonsConfirmed = null,
-            dateModified = null,
-            isFavorite = false
-        )
-        val cocktailDetails2 = CocktailDetails(
-            idDrink = "11008",
-            strDrink = "Margarita",
-            strDrinkAlternate = null,
-            strTags = null,
-            strVideo = null,
-            strCategory = "Cocktail",
-            strIBA = null,
-            strAlcoholic = "Alcoholic",
-            strGlass = "Cocktail glass",
-            strInstructions = "Mix ingredients",
-            strInstructionsES = null,
-            strInstructionsDE = null,
-            strInstructionsFR = null,
-            strInstructionsIT = null,
-            strInstructionsZH_HANS = null,
-            strInstructionsZH_HANT = null,
-            strDrinkThumb = "margarita.jpg",
-            strIngredient1 = "Tequila",
-            strIngredient2 = "Lime",
-            strIngredient3 = null,
-            strIngredient4 = null,
-            strIngredient5 = null,
-            strIngredient6 = null,
-            strIngredient7 = null,
-            strIngredient8 = null,
-            strIngredient9 = null,
-            strIngredient10 = null,
-            strIngredient11 = null,
-            strIngredient12 = null,
-            strIngredient13 = null,
-            strIngredient14 = null,
-            strIngredient15 = null,
-            strMeasure1 = "2 oz",
-            strMeasure2 = "1 oz",
-            strMeasure3 = null,
-            strMeasure4 = null,
-            strMeasure5 = null,
-            strMeasure6 = null,
-            strMeasure7 = null,
-            strMeasure8 = null,
-            strMeasure9 = null,
-            strMeasure10 = null,
-            strMeasure11 = null,
-            strMeasure12 = null,
-            strMeasure13 = null,
-            strMeasure14 = null,
-            strMeasure15 = null,
-            strImageSource = null,
-            strImageAttribution = null,
-            strCreativeCommonsConfirmed = null,
-            dateModified = null,
-            isFavorite = false
-        )
-
-        coEvery { mockRepo.getCocktailDetails(cocktailId1) } returns CocktailDetailsResponse(drinks = listOf(cocktailDetails1))
-        coEvery { mockRepo.getCocktailDetails(cocktailId2) } returns CocktailDetailsResponse(drinks = listOf(cocktailDetails2))
-
-        // When
-        viewModel.getDetails(cocktailId1)
-        testDispatcher.scheduler.advanceUntilIdle()
-
-        viewModel.getDetails(cocktailId2)
-        testDispatcher.scheduler.advanceUntilIdle()
-
-        // Then
-        coVerify { mockRepo.getCocktailDetails(cocktailId1) }
-        coVerify { mockRepo.getCocktailDetails(cocktailId2) }
-        assertEquals("11008", viewModel.cocktailDetailsData.value?.idDrink)
-        assertEquals("Margarita", viewModel.cocktailDetailsData.value?.strDrink)
-    }
-
     @Test
     fun `cocktailDetailsData is initialized`() {
         // Then
         assertNotNull(viewModel.cocktailDetailsData)
     }
-
-    @Test
-    fun `getDetails with cocktail having all fields populated`() = runTest {
-        // Given
-        val cocktailId = "11007"
-        val cocktailDetails = CocktailDetails(
-            idDrink = "11007",
-            strDrink = "Mojito",
-            strDrinkAlternate = "Cuban Mojito",
-            strTags = "IBA,ContemporaryClassic,Summer",
-            strVideo = "https://www.youtube.com/watch?v=example",
-            strCategory = "Cocktail",
-            strIBA = "Contemporary Classics",
-            strAlcoholic = "Alcoholic",
-            strGlass = "Highball glass",
-            strInstructions = "Muddle mint leaves with sugar and lime juice. Add a splash of soda water and fill the glass with cracked ice. Pour the rum and top with soda water. Garnish and serve with straw.",
-            strInstructionsES = "Machacar las hojas de menta con azúcar y jugo de lima. Agregar un chorrito de agua con gas y llenar el vaso con hielo picado. Verter el ron y completar con agua con gas. Decorar y servir con pajita.",
-            strInstructionsDE = "Minzblätter mit Zucker und Limettensaft zerdrücken. Einen Spritzer Sodawasser hinzufügen und das Glas mit gebrochenem Eis füllen. Den Rum eingießen und mit Sodawasser auffüllen. Garnieren und mit Strohhalm servieren.",
-            strInstructionsFR = "Écraser les feuilles de menthe avec le sucre et le jus de citron vert. Ajouter un éclaboussure d'eau gazeuse et remplir le verre avec de la glace pilée. Verser le rhum et compléter avec de l'eau gazeuse. Garnir et servir avec une paille.",
-            strInstructionsIT = "Schiacciare le foglie di menta con zucchero e succo di lime. Aggiungere uno spruzzo di acqua gassata e riempire il bicchiere con ghiaccio tritato. Versare il rum e completare con acqua gassata. Guarnire e servire con cannuccia.",
-            strInstructionsZH_HANS = "将薄荷叶与糖和酸橙汁捣碎。加入少量苏打水，用碎冰装满杯子。倒入朗姆酒，用苏打水加满。装饰并用吸管服务。",
-            strInstructionsZH_HANT = "將薄荷葉與糖和酸橙汁搗碎。加入少量蘇打水，用碎冰裝滿杯子。倒入朗姆酒，用蘇打水加滿。裝飾並用吸管服務。",
-            strDrinkThumb = "https://www.thecocktaildb.com/images/media/drink/metwgh1606770327.jpg",
-            strIngredient1 = "White rum",
-            strIngredient2 = "Lime",
-            strIngredient3 = "Sugar",
-            strIngredient4 = "Mint",
-            strIngredient5 = "Soda water",
-            strIngredient6 = "Ice",
-            strIngredient7 = "Mint sprig",
-            strIngredient8 = null,
-            strIngredient9 = null,
-            strIngredient10 = null,
-            strIngredient11 = null,
-            strIngredient12 = null,
-            strIngredient13 = null,
-            strIngredient14 = null,
-            strIngredient15 = null,
-            strMeasure1 = "2-3 oz",
-            strMeasure2 = "Juice of 1/2",
-            strMeasure3 = "2 tsp",
-            strMeasure4 = "2-4",
-            strMeasure5 = "Top",
-            strMeasure6 = "Fill",
-            strMeasure7 = "Garnish",
-            strMeasure8 = null,
-            strMeasure9 = null,
-            strMeasure10 = null,
-            strMeasure11 = null,
-            strMeasure12 = null,
-            strMeasure13 = null,
-            strMeasure14 = null,
-            strMeasure15 = null,
-            strImageSource = "https://commons.wikimedia.org/wiki/File:Mojito_001.jpg",
-            strImageAttribution = "TheCocktailDB.com",
-            strCreativeCommonsConfirmed = "Yes",
-            dateModified = "2017-09-07 21:42:09",
-            isFavorite = false
-        )
-        val response = CocktailDetailsResponse(drinks = listOf(cocktailDetails))
-
-        coEvery { mockRepo.getCocktailDetails(cocktailId) } returns response
-
-        // When
-        viewModel.getDetails(cocktailId)
-        testDispatcher.scheduler.advanceUntilIdle()
-
-        // Then
-        coVerify { mockRepo.getCocktailDetails(cocktailId) }
-        val result = viewModel.cocktailDetailsData.value
-        assertNotNull(result)
-        assertEquals("11007", result?.idDrink)
-        assertEquals("Mojito", result?.strDrink)
-        assertEquals("Cuban Mojito", result?.strDrinkAlternate)
-        assertEquals("IBA,ContemporaryClassic,Summer", result?.strTags)
-        assertEquals("https://www.youtube.com/watch?v=example", result?.strVideo)
-        assertEquals("Cocktail", result?.strCategory)
-        assertEquals("Contemporary Classics", result?.strIBA)
-        assertEquals("Alcoholic", result?.strAlcoholic)
-        assertEquals("Highball glass", result?.strGlass)
-        assertTrue(result?.strInstructions?.contains("Muddle mint leaves") == true)
-        assertTrue(result?.strInstructionsES?.contains("Machacar las hojas") == true)
-        assertTrue(result?.strInstructionsDE?.contains("Minzblätter mit Zucker") == true)
-        assertTrue(result?.strInstructionsFR?.contains("Écraser les feuilles") == true)
-        assertTrue(result?.strInstructionsIT?.contains("Schiacciare le foglie") == true)
-        assertTrue(result?.strInstructionsZH_HANS?.contains("将薄荷叶") == true)
-        assertTrue(result?.strInstructionsZH_HANT?.contains("將薄荷葉") == true)
-        assertEquals("https://www.thecocktaildb.com/images/media/drink/metwgh1606770327.jpg", result?.strDrinkThumb)
-        assertEquals("White rum", result?.strIngredient1)
-        assertEquals("Lime", result?.strIngredient2)
-        assertEquals("Sugar", result?.strIngredient3)
-        assertEquals("Mint", result?.strIngredient4)
-        assertEquals("Soda water", result?.strIngredient5)
-        assertEquals("Ice", result?.strIngredient6)
-        assertEquals("Mint sprig", result?.strIngredient7)
-        assertEquals("2-3 oz", result?.strMeasure1)
-        assertEquals("Juice of 1/2", result?.strMeasure2)
-        assertEquals("2 tsp", result?.strMeasure3)
-        assertEquals("2-4", result?.strMeasure4)
-        assertEquals("Top", result?.strMeasure5)
-        assertEquals("Fill", result?.strMeasure6)
-        assertEquals("Garnish", result?.strMeasure7)
-        assertEquals("https://commons.wikimedia.org/wiki/File:Mojito_001.jpg", result?.strImageSource)
-        assertEquals("TheCocktailDB.com", result?.strImageAttribution)
-        assertEquals("Yes", result?.strCreativeCommonsConfirmed)
-        assertEquals("2017-09-07 21:42:09", result?.dateModified)
-        assertFalse(result?.isFavorite == true)
-    }
-
-    @Test
-    fun `getDetails with multiple calls updates data correctly`() = runTest {
-        // Given
-        val cocktailId1 = "11007"
-        val cocktailId2 = "11008"
-        val cocktailDetails1 = CocktailDetails(
-            idDrink = "11007",
-            strDrink = "Mojito",
-            strDrinkAlternate = null,
-            strTags = null,
-            strVideo = null,
-            strCategory = "Cocktail",
-            strIBA = null,
-            strAlcoholic = "Alcoholic",
-            strGlass = "Highball glass",
-            strInstructions = "Mix ingredients",
-            strInstructionsES = null,
-            strInstructionsDE = null,
-            strInstructionsFR = null,
-            strInstructionsIT = null,
-            strInstructionsZH_HANS = null,
-            strInstructionsZH_HANT = null,
-            strDrinkThumb = "mojito.jpg",
-            strIngredient1 = "Rum",
-            strIngredient2 = "Lime",
-            strIngredient3 = null,
-            strIngredient4 = null,
-            strIngredient5 = null,
-            strIngredient6 = null,
-            strIngredient7 = null,
-            strIngredient8 = null,
-            strIngredient9 = null,
-            strIngredient10 = null,
-            strIngredient11 = null,
-            strIngredient12 = null,
-            strIngredient13 = null,
-            strIngredient14 = null,
-            strIngredient15 = null,
-            strMeasure1 = "2 oz",
-            strMeasure2 = "1 oz",
-            strMeasure3 = null,
-            strMeasure4 = null,
-            strMeasure5 = null,
-            strMeasure6 = null,
-            strMeasure7 = null,
-            strMeasure8 = null,
-            strMeasure9 = null,
-            strMeasure10 = null,
-            strMeasure11 = null,
-            strMeasure12 = null,
-            strMeasure13 = null,
-            strMeasure14 = null,
-            strMeasure15 = null,
-            strImageSource = null,
-            strImageAttribution = null,
-            strCreativeCommonsConfirmed = null,
-            dateModified = null,
-            isFavorite = false
-        )
-        val cocktailDetails2 = CocktailDetails(
-            idDrink = "11008",
-            strDrink = "Margarita",
-            strDrinkAlternate = null,
-            strTags = null,
-            strVideo = null,
-            strCategory = "Cocktail",
-            strIBA = null,
-            strAlcoholic = "Alcoholic",
-            strGlass = "Cocktail glass",
-            strInstructions = "Mix ingredients",
-            strInstructionsES = null,
-            strInstructionsDE = null,
-            strInstructionsFR = null,
-            strInstructionsIT = null,
-            strInstructionsZH_HANS = null,
-            strInstructionsZH_HANT = null,
-            strDrinkThumb = "margarita.jpg",
-            strIngredient1 = "Tequila",
-            strIngredient2 = "Lime",
-            strIngredient3 = null,
-            strIngredient4 = null,
-            strIngredient5 = null,
-            strIngredient6 = null,
-            strIngredient7 = null,
-            strIngredient8 = null,
-            strIngredient9 = null,
-            strIngredient10 = null,
-            strIngredient11 = null,
-            strIngredient12 = null,
-            strIngredient13 = null,
-            strIngredient14 = null,
-            strIngredient15 = null,
-            strMeasure1 = "2 oz",
-            strMeasure2 = "1 oz",
-            strMeasure3 = null,
-            strMeasure4 = null,
-            strMeasure5 = null,
-            strMeasure6 = null,
-            strMeasure7 = null,
-            strMeasure8 = null,
-            strMeasure9 = null,
-            strMeasure10 = null,
-            strMeasure11 = null,
-            strMeasure12 = null,
-            strMeasure13 = null,
-            strMeasure14 = null,
-            strMeasure15 = null,
-            strImageSource = null,
-            strImageAttribution = null,
-            strCreativeCommonsConfirmed = null,
-            dateModified = null,
-            isFavorite = false
-        )
-
-        coEvery { mockRepo.getCocktailDetails(cocktailId1) } returns CocktailDetailsResponse(drinks = listOf(cocktailDetails1))
-        coEvery { mockRepo.getCocktailDetails(cocktailId2) } returns CocktailDetailsResponse(drinks = listOf(cocktailDetails2))
-
-        // When - First call
-        viewModel.getDetails(cocktailId1)
-        testDispatcher.scheduler.advanceUntilIdle()
-
-        // Then - First call
-        assertEquals("11007", viewModel.cocktailDetailsData.value?.idDrink)
-        assertEquals("Mojito", viewModel.cocktailDetailsData.value?.strDrink)
-
-        // When - Second call
-        viewModel.getDetails(cocktailId2)
-        testDispatcher.scheduler.advanceUntilIdle()
-
-        // Then - Second call
-        assertEquals("11008", viewModel.cocktailDetailsData.value?.idDrink)
-        assertEquals("Margarita", viewModel.cocktailDetailsData.value?.strDrink)
-    }
 }
diff --git a/app/src/test/java/com/example/cocktailsdbapp/ui/search/SearchViewModelTest.kt b/app/src/test/java/com/example/cocktailsdbapp/ui/search/SearchViewModelTest.kt
index f567f67..13608cb 100644
--- a/app/src/test/java/com/example/cocktailsdbapp/ui/search/SearchViewModelTest.kt
+++ b/app/src/test/java/com/example/cocktailsdbapp/ui/search/SearchViewModelTest.kt
@@ -41,18 +41,6 @@ class SearchViewModelTest {
         clearAllMocks()
     }
 
-    @Test
-    fun `setSearchQuery updates search query flow`() {
-        // Given
-        val query = "mojito"
-
-        // When
-        viewModel.setSearchQuery(query)
-
-        // Then - Query is set, searchResultsData is initialized
-        assertNotNull(viewModel.searchResultsData)
-    }
-
     @Test
     fun `executeSearch with valid results updates searchResultsData`() = runTest {
         // Given
@@ -144,7 +132,6 @@ class SearchViewModelTest {
         // Given
         val userEmail = "test@example.com"
         val cocktail = Cocktail("Mojito", "mojito.jpg", "11007", false)
-        val roomCocktail = RoomCocktail("Mojito", "mojito.jpg", "11007")
 
         coEvery { mockRepo.findFavoriteCocktail(userEmail, cocktail.idDrink) } returns null
         coEvery { mockRepo.insertCocktail(userEmail, any()) } just Runs
@@ -187,49 +174,6 @@ class SearchViewModelTest {
         coVerify(exactly = 0) { mockRepo.insertCocktail(any(), any()) }
     }
 
-    @Test
-    fun `favoriteCocktail toggles favorite status correctly`() = runTest {
-        // Given
-        val userEmail = "test@example.com"
-        val cocktail = Cocktail("Margarita", "margarita.jpg", "11008", false)
-
-        coEvery { mockRepo.findFavoriteCocktail(userEmail, cocktail.idDrink) } returns null
-        coEvery { mockRepo.insertCocktail(userEmail, any()) } just Runs
-
-        // When - Add to favorites
-        viewModel.favoriteCocktail(userEmail, cocktail)
-        testDispatcher.scheduler.advanceUntilIdle()
-
-        // Then
-        coVerify { mockRepo.insertCocktail(userEmail, any()) }
-    }
-
-    @Test
-    fun `fetchSearchData cancels previous search job`() = runTest {
-        // Given
-        val userEmail = "test@example.com"
-        val query1 = "mojito"
-        val query2 = "margarita"
-        val response = CocktailResponse(drinks = emptyList())
-
-        coEvery { mockRepo.getSearch(any()) } returns response
-        coEvery { mockRepo.getFavorites(userEmail) } returns emptyList()
-
-        // When - Start first search
-        viewModel.setSearchQuery(query1)
-        viewModel.fetchSearchData(userEmail)
-        
-        // Immediately start second search (should cancel first)
-        viewModel.setSearchQuery(query2)
-        viewModel.fetchSearchData(userEmail)
-        
-        advanceTimeBy(800)
-        testDispatcher.scheduler.advanceUntilIdle()
-
-        // Then - Second query should be executed
-        coVerify(atLeast = 1) { mockRepo.getSearch(any()) }
-    }
-
     @Test
     fun `debounce prevents rapid search calls`() = runTest {
         // Given
@@ -261,7 +205,7 @@ class SearchViewModelTest {
         testDispatcher.scheduler.advanceUntilIdle()
 
         // Then - Should only search once after debounce period
-        coVerify(atLeast = 1) { mockRepo.getSearch("mojito") }
+        coVerify(exactly = 1) { mockRepo.getSearch("mojito") }
     }
 
     @Test
@@ -285,12 +229,6 @@ class SearchViewModelTest {
         coVerify { mockRepo.insertCocktail(user2, any()) }
     }
 
-    @Test
-    fun `searchResultsData is initialized`() {
-        // Then
-        assertNotNull(viewModel.searchResultsData)
-    }
-
     @Test
     fun `favoriteCocktail calls insertCocktail with correct parameters`() = runTest {
         // Given
